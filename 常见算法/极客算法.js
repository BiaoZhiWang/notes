/**
 * 
 * #### 贪心算法
> 每次选择最优解
```
  问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。这个子问题最优解成为最优子结构
  贪心算法与动态规划的不同在于做出选择后，不能回退。动态规划会保存以前的运算结果，根据以前的结果对当前进行选择，有回退概念
```
 */

/**
  * 买卖股票的最佳时机
  * 输入： [7,1,5,3,6,4](每天的股价) 输出7 （总盈利）
  * 输入: [1,2,3,4,5] 输出4
  * 输入:[7,6,3,2]   输出0
  可是有1/0股，可以买卖无数次，但是依据题意，每天买一次或者卖一次，因为一天的价格是固定的
*/
// a、深度搜索，O(2^n)

//b、贪心算法 , 只要后一天的价格比前一天高，就低买入，高卖出 时间复杂度O(n)

// d、动态规划 ， 每一天之前的利润记录下，递推后一天卖出是否比总利润大


/**
 * 广度优先搜索
 *  使用一个队列收集所有节点，先入先出， 如果搜索的是图，有回路，就需要判重，是否已经被访问过了
 */

/**
 * 深度优先遍历： 使用栈
 */

 // 二叉树的遍历
 /**
  * 给定二叉树：[3,9,20,null,null,15,7]
  * 返回其层次遍历结果:
  *   [
  *     [3],
  *     [9,20],
  *     [15,7]
  *   ]
  */
 // 解法1：BFS， 问题点在于如何确定当前是否是一层的末尾

